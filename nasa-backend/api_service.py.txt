# python -m venv venv
# source venv/bin/activate
# pip install fastapi uvicorn pydantic

from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn
import random

# --- 1. Setup the FastAPI application ---
app = FastAPI(
    title="NASA Climate Prediction API",
    description="Backend service for generating climate projection data based on scenario selection."
)

# --- 2. Define the Request Body Structure ---
# This ensures the input from the frontend is correctly validated (e.g., must contain a 'scenario' string)
class PredictionRequest(BaseModel):
    scenario: str

# --- 3. Mock ML Model Function (Placeholder for Real Logic) ---
# In the NASA Space Apps Challenge, this function would:
# 1. Load the pre-processed NASA data (e.g., GISTEMP time series).
# 2. Load the trained LSTM/ARIMA model (e.g., model.h5).
# 3. Use the 'scenario' input to adjust a key parameter (like future CO2 growth rate).
# 4. Generate the prediction time series.

def run_ml_model(scenario: str):
    """Generates the time series data based on the scenario."""
    
    # --- Configuration based on Scenario ---
    if scenario == 'low':
        base_temp = 0.8
        slope = 0.01  # Slower warming rate
    elif scenario == 'high':
        base_temp = 1.0
        slope = 0.035 # Faster warming rate
    else: # medium/default
        base_temp = 0.9
        slope = 0.02
        
    historical_data = []
    # Historical data (1980 to 2020)
    for year in range(1980, 2021):
        # Simulate real historical data
        anomaly = 0.2 + (year - 1980) * 0.01 + random.random() * 0.05
        historical_data.append({
            "year": str(year),
            "Historical Anomaly (째C)": round(anomaly, 3),
            "Predicted Anomaly (째C)": None, 
        })

    prediction_data = []
    # Prediction data (2021 to 2050)
    for year in range(2021, 2051):
        # Apply the scenario's slope for future prediction
        predicted_anomaly = base_temp + (year - 2020) * slope + random.random() * 0.01
        prediction_data.append({
            "year": str(year),
            "Historical Anomaly (째C)": None,
            "Predicted Anomaly (째C)": round(predicted_anomaly, 3),
        })

    return historical_data + prediction_data


# --- 4. API Endpoint Definition ---
@app.post("/api/predict_anomaly")
async def predict_anomaly(request: PredictionRequest):
    """
    Receives a climate scenario and returns the predicted temperature anomaly time series.
    """
    try:
        # Run the mock model (replace with real ML model call)
        prediction_result = run_ml_model(request.scenario)
        return prediction_result
    except Exception as e:
        print(f"Prediction error: {e}")
        return {"error": "Failed to generate prediction"}, 500

# --- 5. Run Command ---
# To run this server: uvicorn api_service:app --reload
# It will be accessible at http://127.0.0.1:8000/
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
